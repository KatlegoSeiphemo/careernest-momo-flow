import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ArrowLeft, Download, Sparkles, Upload } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { toast } from "sonner";

const CVGenerator = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    personalInfo: { fullName: "", email: "", phone: "", location: "", linkedIn: "" },
    summary: "",
    experience: "",
    education: "",
    skills: "",
    achievements: "",
    coverLetter: ""
  });
  const [generatedCV, setGeneratedCV] = useState("");
  const [generatedCoverLetter, setGeneratedCoverLetter] = useState("");
  const [uploadedCVs, setUploadedCVs] = useState<File[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);

  const handleInputChange = (section: string, field: string, value: string) => {
    if (section === 'personalInfo') {
      setFormData(prev => ({ ...prev, personalInfo: { ...prev.personalInfo, [field]: value } }));
    } else {
      setFormData(prev => ({ ...prev, [field]: value }));
    }
  };

  const generateCV = async () => {
    setIsGenerating(true);
    setTimeout(() => {
      const cv = `
# ${formData.personalInfo.fullName}

**Contact Information:**
- Email: ${formData.personalInfo.email}
- Phone: ${formData.personalInfo.phone}
- Location: ${formData.personalInfo.location}
- LinkedIn: ${formData.personalInfo.linkedIn}

## Professional Summary
${formData.summary || "Professional with strong background."}

## Work Experience
${formData.experience || "Experience details..."}

## Education
${formData.education || "Educational background..."}

## Skills
${formData.skills || "Skills listed here..."}

## Achievements
${formData.achievements || "Notable achievements..."}

---
*Generated by CareerNest AI CV Generator*
      `;
      setGeneratedCV(cv);

      const coverLetter = `
Dear Hiring Manager,

I am excited to apply for opportunities in your organization. With my background in ${formData.skills || "relevant skills"} and experience in ${formData.experience || "work experience"}, I am confident I can contribute effectively.

${formData.summary || "Professional summary goes here."}

Sincerely,
${formData.personalInfo.fullName}
      `;
      setGeneratedCoverLetter(coverLetter);

      setIsGenerating(false);
      toast.success("CV and Cover Letter generated successfully!");
    }, 2000);
  };

  const handleCVUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      setUploadedCVs(prev => [...prev, ...Array.from(e.target.files)]);
      toast.success("CV uploaded successfully!");
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 via-yellow-50 to-red-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center h-16">
            <Button variant="ghost" onClick={() => navigate("/dashboard")}>
              <ArrowLeft className="w-4 h-4 mr-2" />
              Back to Dashboard
            </Button>
            <h1 className="text-xl font-semibold text-primary ml-4">AI CV & Cover Letter Generator</h1>
          </div>
        </div>
      </header>

      <main className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Input Form */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Sparkles className="w-5 h-5 mr-2 text-primary" />
                Enter Your Information
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Personal Info */}
              <div className="space-y-4">
                <h3 className="font-semibold">Personal Information</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="fullName">Full Name</Label>
                    <Input
                      id="fullName"
                      value={formData.personalInfo.fullName}
                      onChange={(e) => handleInputChange("personalInfo", "fullName", e.target.value)}
                    />
                  </div>
                  <div>
                    <Label htmlFor="email">Email</Label>
                    <Input
                      id="email"
                      type="email"
                      value={formData.personalInfo.email}
                      onChange={(e) => handleInputChange("personalInfo", "email", e.target.value)}
                    />
                  </div>
                  <div>
                    <Label htmlFor="phone">Phone</Label>
                    <Input
                      id="phone"
                      value={formData.personalInfo.phone}
                      onChange={(e) => handleInputChange("personalInfo", "phone", e.target.value)}
                    />
                  </div>
                  <div>
                    <Label htmlFor="location">Location</Label>
                    <Input
                      id="location"
                      value={formData.personalInfo.location}
                      onChange={(e) => handleInputChange("personalInfo", "location", e.target.value)}
                    />
                  </div>
                  <div>
                    <Label htmlFor="linkedIn">LinkedIn</Label>
                    <Input
                      id="linkedIn"
                      value={formData.personalInfo.linkedIn}
                      onChange={(e) => handleInputChange("personalInfo", "linkedIn", e.target.value)}
                    />
                  </div>
                </div>
              </div>

              {/* Other sections */}
              {["summary", "experience", "education", "skills", "achievements", "coverLetter"].map((field) => (
                <div key={field}>
                  <Label htmlFor={field}>{field === "coverLetter" ? "Cover Letter Notes" : field.charAt(0).toUpperCase() + field.slice(1)}</Label>
                  <Textarea
                    id={field}
                    value={formData[field as keyof typeof formData] as string}
                    onChange={(e) => handleInputChange("", field, e.target.value)}
                    placeholder={`Enter your ${field}...`}
                  />
                </div>
              ))}

              <Button onClick={generateCV} className="w-full" disabled={isGenerating}>
                {isGenerating ? "Generating..." : "Generate AI CV & Cover Letter"}
              </Button>

              {/* CV Upload */}
              <div>
                <Label htmlFor="uploadCV">Upload Existing CVs</Label>
                <Input
                  id="uploadCV"
                  type="file"
                  multiple
                  onChange={handleCVUpload}
                />
                {uploadedCVs.length > 0 && (
                  <ul className="mt-2 text-sm text-gray-700">
                    {uploadedCVs.map((file, idx) => (
                      <li key={idx}>{file.name}</li>
                    ))}
                  </ul>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Generated CV & Cover Letter Preview */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span>Generated Preview</span>
                {generatedCV && (
                  <Button variant="outline" size="sm">
                    <Download className="w-4 h-4 mr-2" /> Download
                  </Button>
                )}
              </CardTitle>
            </CardHeader>
            <CardContent>
              {generatedCV ? (
                <div className="space-y-6">
                  <div className="bg-white p-6 rounded border min-h-[300px]">
                    <pre className="whitespace-pre-wrap text-sm">{generatedCV}</pre>
                  </div>
                  <div className="bg-white p-6 rounded border min-h-[200px]">
                    <h4 className="font-semibold mb-2">Generated Cover Letter</h4>
                    <pre className="whitespace-pre-wrap text-sm">{generatedCoverLetter}</pre>
                  </div>
                </div>
              ) : (
                <div className="text-center text-muted-foreground py-12">
                  <Sparkles className="w-12 h-12 mx-auto mb-4 opacity-50" />
                  <p>Fill out the form and click "Generate" to see your AI-enhanced CV & Cover Letter</p>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </main>
    </div>
  );
};

export default CVGenerator;

